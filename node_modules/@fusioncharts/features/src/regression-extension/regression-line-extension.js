import _inheritsLoose from"@babel/runtime/helpers/inheritsLoose";import{ComponentInterface}from"@fusioncharts/core/src/component-interface";import getLinearRegressionPoints from"./linear-regression";import getPolynomialRegressionPoints from"./polynomial-regression";import{pluckNumber,pluck,toRaphaelColor,BLANKSTRING}from"@fusioncharts/core/src/lib";import{createPolynomial,createLinear}from"./utility-functions";import{addDep}from"@fusioncharts/core/src/dependency-manager";import regressionLineAnimation from"./regression-line.animation";var hideElement=function hideElement(){this.hide()};addDep({name:"regressionLineAnimation",type:"animationRule",extension:regressionLineAnimation});var RegressionLineExtension=function(_ComponentInterface){_inheritsLoose(RegressionLineExtension,_ComponentInterface);function RegressionLineExtension(){var _this;_this=_ComponentInterface.call(this)||this;_this._config={regressionPoints:[]};_this.regressionLine=[];return _this}var _proto=RegressionLineExtension.prototype;_proto.getType=function getType(){return"extension"};_proto.getName=function getName(){return"regression"};_proto.configureAttributes=function configureAttributes(datasetComponent){var regressionLineExtension=this,chartData=regressionLineExtension.getFromEnv("dataSource").chart,datasetConfig=datasetComponent.config,JSONData=datasetConfig.JSONData,config=regressionLineExtension._config;config.regressionPoints.splice(0,config.regressionPoints.length);config.showYOnX=pluckNumber(JSONData.showyonx,chartData.showyonx,1);config.regressionLineColor=toRaphaelColor(pluck(JSONData.regressionlinecolor,chartData.regressionlinecolor,datasetConfig.anchorbordercolor,datasetConfig.lineColor,datasetConfig.anchorBgColor,"fff000"));config.polynomialRegressionLineColor=toRaphaelColor(pluck(JSONData.polynomialregressionlinecolor,chartData.polynomialregressionlinecolor,config.regressionLineColor));config.regressionLineThickness=pluckNumber(JSONData.regressionlinethickness,chartData.regressionlinethickness,JSONData.anchorborderthickness,1);config.polynomialRegressionLineThickness=pluckNumber(JSONData.polynomialregressionlinethickness,chartData.polynomialregressionlinethickness,config.regressionLineThickness);config.regressionLineAlpha=pluckNumber(JSONData.regressionlinealpha,chartData.regressionlinealpha,100);config.polynomialRegressionLineAlpha=pluckNumber(JSONData.polynomialregressionlinealpha,chartData.polynomialregressionlinealpha,config.regressionLineAlpha);if(createLinear(chartData,JSONData)){config.regressionPoints.push(getLinearRegressionPoints(JSONData.data,config.showYOnX))}if(createPolynomial(chartData,JSONData)){config.regressionPoints.push(getPolynomialRegressionPoints(JSONData.data,config.showYOnX))}};_proto.draw=function draw(){var regression=this,regressionConfig=regression._config,xAxis=regression.getFromEnv("xAxis"),yAxis=regression.getFromEnv("yAxis"),chart=regression.getFromEnv("chart"),canvasConfig=chart.getChildren("canvas")[0].config,container=regression.getContainer("regressionlinecontainer"),animManager=regression.getFromEnv("animationManager"),allPoints=regressionConfig.regressionPoints,oldPoints=[],newPoints=[],n,regressionLineLinearDummy=regression.getGraphicalElement("regressionLineLinear"),regressionLinePolynomialDummy=regression.getGraphicalElement("regressionLinePolynomial"),regressionLineLinear,regressionLinePolynomial,isLinear,attrObjLinear,attrObjPoly,regressionState,hideFn=hideElement;!regression.getLinkedParent().getState("visible")&&(regressionState="disappearing");container=regression.addContainer("regressionlinecontainer",animManager.setAnimation({el:container||"group",attr:{name:"regressionlinecontainer","clip-rect":[canvasConfig.canvasLeft,canvasConfig.canvasTop,canvasConfig.canvasWidth,canvasConfig.canvasHeight]},container:chart.getChildContainer("abovePlotGroup"),component:regression,label:"group"}));for(var j=0;j<allPoints.length;j++){var pathString=BLANKSTRING;oldPoints=allPoints[j][0];newPoints=allPoints[j][1];n=newPoints.length;if(oldPoints.length===0&&newPoints.length===0){isLinear=true;pathString+="M0,0"}else if(oldPoints.length!==0&&newPoints.length===0){isLinear=false;pathString+="M0,0"}else if(oldPoints.length===0){isLinear=true;pathString+="M"+xAxis.getPixel(newPoints[0].x)+","+yAxis.getPixel(newPoints[0].y);pathString+="L"+xAxis.getPixel(newPoints[n-1].x)+","+yAxis.getPixel(newPoints[n-1].y)}else{isLinear=false;pathString+="M"+xAxis.getPixel(newPoints[0].x)+","+yAxis.getPixel(newPoints[0].y);pathString+=" R"+xAxis.getPixel(newPoints[1].x)+","+yAxis.getPixel(newPoints[1].y);for(var i=2;i<n;i++){pathString+=" "+xAxis.getPixel(newPoints[i].x)+","+yAxis.getPixel(newPoints[i].y)}}if(!isLinear){attrObjPoly={opacity:Number(pluck(regressionConfig.polynomialRegressionLineAlpha,regressionConfig.regressionLineAlpha))/100,stroke:pluck(regressionConfig.polynomialRegressionLineColor,regressionConfig.regressionLineColor),"stroke-width":pluck(regressionConfig.polynomialRegressionLineThickness,regressionConfig.regressionLineThickness),path:pathString}}else{attrObjLinear={opacity:Number(regressionConfig.regressionLineAlpha)/100,stroke:regressionConfig.regressionLineColor,"stroke-width":regressionConfig.regressionLineThickness,path:pathString}}}if(regressionState!=="disappearing"){regressionLineLinearDummy&&regressionLineLinearDummy.show();regressionLinePolynomialDummy&&regressionLinePolynomialDummy.show()}regressionLineLinear=animManager.setAnimation({el:regressionLineLinearDummy||"path",container:container,component:regression,doNotRemove:true,attr:!(regressionState==="disappearing")&&attrObjLinear,callback:regressionState==="disappearing"&&hideFn,label:"path"});if(!regressionLineLinearDummy){regression.addGraphicalElement("regressionLineLinear",regressionLineLinear)}regressionLinePolynomial=animManager.setAnimation({el:regressionLinePolynomialDummy||"path",container:container,component:regression,doNotRemove:true,attr:!(regressionState==="disappearing")&&attrObjPoly,callback:regressionState==="disappearing"&&hideFn,label:"path"});if(!regressionLinePolynomialDummy){regression.addGraphicalElement("regressionLinePolynomial",regressionLinePolynomial)}};return RegressionLineExtension}(ComponentInterface);export{RegressionLineExtension as default};