import _inheritsLoose from"@babel/runtime/helpers/inheritsLoose";import SmartRenderer from"@fusioncharts/core/src/component-interface/smart-renderer";import timeConverter from"@fusioncharts/utils/src/time-converter";import{pluck,parseUnsafeString,defined}from"@fusioncharts/core/src/lib";import{convertColor}from"@fusioncharts/core/src/lib/lib-graphics";import{getMinPlaceHolder,getPlaceHolderIndex}from"@fusioncharts/utils/src/time-bucket";import{addDep}from"@fusioncharts/core/src/dependency-manager";import flagMarkerAnimation from"./flag-marker.animation";import isArray from"@fusioncharts/utils/src/type/is-array";import isObject from"@fusioncharts/utils/src/type/is-object";var pathStr="M12.4444444,0 L1.55555556,0 C0.7,0 0,0.654545455 0,1.45454545 L0,10.8363636 C0,11.3454545 0.233333333,11.7817897 0.7,12.0727273 L7,16 L13.3,12.0727273 C13.6888889,11.7818182 14,11.3454545 14,10.8363636 L14,1.45454545 C14,0.654545455 13.3,0 12.4444444,0 Z",flagHeight=16,stickLength=10,flagWidth=16,VISIBLE="visible";var DEFAULT_FONT_COLOR="#ffffff",DEFAULT_STROKE_COLOR="#8c8c8c",DEFAULT_TOOLTIP_BACKGROUND="#f2eded",getSameProperty=function getSameProperty(arr){if(arr===void 0){arr=[]}if(!isArray(arr))return{};var output={},key,j,obj1=isObject(arr[0])?arr[0]:{},len=arr.length,filterFn=function filterFn(obj){return isObject(obj)&&obj.hasOwnProperty(key)&&obj[key]==obj1[key]};for(key in obj1){var addProp=true;for(j=1;j<len;++j){if(!filterFn(arr[j])){addProp=false;break}}if(addProp){output[key]=obj1[key]}}return output};addDep({name:"flagMarkerAnimation",type:"animationRule",extension:flagMarkerAnimation});var FlagMarker=function(_SmartRenderer){_inheritsLoose(FlagMarker,_SmartRenderer);var _proto=FlagMarker.prototype;_proto.configure=function configure(dataObj){_SmartRenderer.prototype.configure.call(this,dataObj);var marker=this,config=marker.config,styleInfo=config.styleInfo,currStyle,styleObj;dataObj.data&&(this.config.data=dataObj.data);if(styleObj=dataObj.style){currStyle=styleInfo[dataObj.index]||(styleInfo[dataObj.index]={});for(var styles in styleObj){currStyle[styles]=styleObj[styles]}}config.skipGrouping=dataObj.skipGrouping;defined(dataObj.visibility)&&(config.visibility=dataObj.visibility)};function FlagMarker(){var _this;_this=_SmartRenderer.call(this)||this;_this._getMarkerBounds=function(){return{width:flagWidth,height:stickLength+flagHeight}};_this.config.styleInfo={};return _this}_proto.setHoverInEffect=function setHoverInEffect(index){var marker=this,markerConfig=marker.config,hoveredMarkers=markerConfig.markerInfo[index].markers,style=hoveredMarkers[0].style||{},markerHoverStyle={},markerHoverStyles={},textHoverStyle={},textHoverStyles={},styleDef=marker.getFromEnv("getStyleDef");if(hoveredMarkers.multipleMarkers){markerHoverStyles=hoveredMarkers.markers.map(function(markerInfo){return markerInfo.style&&styleDef(markerInfo.style["marker:hover"])||{}});textHoverStyles=hoveredMarkers.markers.map(function(markerInfo){return markerInfo.style&&styleDef(markerInfo.style["text:hover"])||{}});Object.assign(markerHoverStyle,markerConfig.defaultHoverStyle,getSameProperty(markerHoverStyles));Object.assign(textHoverStyle,markerConfig.defaultHoverStyle,getSameProperty(textHoverStyles))}else{Object.assign(markerHoverStyle,markerConfig.defaultHoverStyle,styleDef(style["marker:hover"]));Object.assign(textHoverStyle,markerConfig.defaultHoverStyle,styleDef(style["text:hover"]))}marker.getFromEnv("animationManager").setAnimationState("mouseOver");marker.setData({style:{marker:markerHoverStyle,text:textHoverStyle},index:index,skipGrouping:true})};_proto.setHoverOutEffect=function setHoverOutEffect(index){var marker=this;marker.getFromEnv("animationManager").setAnimationState("mouseOut");marker.setData({style:{marker:{},text:{}},index:index,skipGrouping:true})};_proto.__setDefaultConfig=function __setDefaultConfig(){var config=this.config;config["default-stroke-width"]=1;config["default-fill-opacity"]=.5;config["default-stroke-opacity"]=.5;config["default-font-color"]=DEFAULT_FONT_COLOR;config["default-stroke-color-multiple"]=DEFAULT_STROKE_COLOR;config["default-tooltip-background"]=DEFAULT_TOOLTIP_BACKGROUND;config.defaultMarkerStyle={"stroke-width":1,"fill-opacity":.5,"stroke-opacity":.5};config.defaultTextStyle={fill:"#ffffff","font-size":"12px","line-height":"14.4px","fill-opacity":1,"stroke-opacity":1,"text-anchor":"middle","font-weight":"normal","font-style":"normal"};config.defaultHoverStyle={opacity:1,"fill-opacity":1,"stroke-opacity":1}};_proto.draw=function draw(){if(this.config.visibility===VISIBLE){this._createGroup();this._drawMarkers()}};_proto.getType=function getType(){return"dataMarker"};_proto.getName=function getName(){return"flagMarker"};_proto._checkPointOverMarker=function _checkPointOverMarker(pX,chartX,chartY,catWidth){var dataMarker=this,config=dataMarker.config,dataInfo=config.dataInfo,currData,x,y,dim=dataMarker._getMarkerBounds(),halfWidth,centerX,returnObj,markerInfo=config.markerInfo,ceilPx=Math.ceil(pX),floorPx=Math.floor(pX),sum=catWidth,indexRange=[ceilPx,floorPx];while(sum<dim.width){indexRange.unshift(++ceilPx);indexRange.push(--floorPx);sum+=catWidth}indexRange.forEach(function(index){if(!returnObj&&markerInfo[index]){currData=dataInfo[index];x=currData.x;y=currData.y;halfWidth=(currData.width||0)/2;centerX=x+halfWidth;if(chartX>=centerX-dim.width/2&&chartX<=centerX+dim.width/2&&chartY<=y&&chartY>=y-dim.height){returnObj={pointIndex:index,hovered:true,pointObj:currData,markerObj:markerInfo[index],component:dataMarker}}}});return returnObj};_proto._getTooltext=function _getTooltext(index){var marker=this,config=marker.config,markerInfo=config.markerInfo,markerObj=markerInfo[index],markers=markerObj.markers,len=markers.length,multipleMarkers=markerObj.multipleMarkers,header,body;if(!markerObj.formatedTime){markerObj.formatedTime=marker.getFromEnv("xScale").getFormattedTime({type:"tooltip",dateRange:markerObj})}if(!markerObj.tooltipValue){markerObj.tooltipValue=marker.getFromEnv("yScale").tickFormat(4,".2s")(markerObj.value)}header="<div style='margin-bottom: 6px'>"+markerObj.formatedTime+"</div>";body="<div style='margin-bottom:6px; height: 14px;'>\n    <div style='float: left;'>"+markerObj.seriesname+":<span style='padding-left:8px'>"+markerObj.tooltipValue+"</span></div>\n    </div>";markers.forEach(function(currMarker,i){multipleMarkers&&(body+="<div style='clear: both; margin-bottom:2px; font-weight: 600;'>"+currMarker.time+"</div>");body+=currMarker.tooltext?"<div style='clear: both; "+(i<len-1?"margin-bottom: 6px":"")+"'>"+parseUnsafeString(currMarker.tooltext)+"</div>":""});return{header:header,body:body}};_proto.allocatePosition=function allocatePosition(){!this.config.skipGrouping&&this._groupMarkers()};_proto._groupMarkers=function _groupMarkers(){var marker=this,parent=marker.getLinkedParent(),info=parent._getRelevantInfo(),firstTimeStamp=info.firstTimeStamp,dataInfo=info.dataInfo,config=marker.config,markerInfo=config.markerInfo={},currMarkerObj,index,markerTime,timeGroupLevelDiff,binDecider=marker.getFromEnv("binDecider"),thresHold=binDecider.getRangeThreshold(),currentGrouping=thresHold[0]._name,data=config.data;config.dataInfo=dataInfo;data.forEach(function(currMarker){markerTime=timeConverter.parser(currMarker.timeformat).parse(currMarker.time);timeGroupLevelDiff=getPlaceHolderIndex(currentGrouping)-getPlaceHolderIndex(getMinPlaceHolder(currMarker.timeformat));if(markerTime&&timeGroupLevelDiff>=0&&timeGroupLevelDiff<=1){markerTime=markerTime.getTime();if(markerTime>=firstTimeStamp){index=marker.getFromEnv("xScale").getBinIndex(markerTime,firstTimeStamp);if(dataInfo[index]){!markerInfo[index]&&(currMarkerObj=markerInfo[index]={markers:[],id:currMarker.seriesname+currMarker.time,startDate:dataInfo[index].startDate,seriesname:currMarker.seriesname,endDate:dataInfo[index].endDate});currMarkerObj.markers.push(currMarker);currMarkerObj.markers.length>1&&(currMarkerObj.multipleMarkers=true)}}}})};_proto._createGroup=function _createGroup(){var marker=this;marker.addGraphicalElement({el:"group",container:{label:"group",id:"thermo",isParent:true},component:marker,label:"group",attr:{name:"markerGroup-thermo"}})};_proto.getStyleInformation=function getStyleInformation(index){var marker=this,config=marker.config,styleInfo=config.styleInfo,currMarkerObj=config.markerInfo[index],getStyleDef=marker.getFromEnv("getStyleDef"),markerStyle,markerHoverStyle,textStyle,style,currMarker,defaultMarkerStyle=config.defaultMarkerStyle,defaultTextStyle=config.defaultTextStyle,info=marker.getLinkedParent()._getRelevantInfo(),appliedMarkerStyle,appliedTextStyle,hoveredStyleInfo,baseTextStyle=marker.getFromEnv("baseTextStyle"),textStyles,markerStyles;appliedMarkerStyle={};appliedTextStyle={};hoveredStyleInfo=styleInfo[index]||{};markerHoverStyle=hoveredStyleInfo.marker||{};currMarker=currMarkerObj.markers[0];style=currMarker.style||{};markerStyle=getStyleDef(style.marker);textStyle=getStyleDef(style.text);if(currMarkerObj.multipleMarkers){markerStyles=currMarkerObj.markers.map(function(markerInfo){return markerInfo.style&&getStyleDef(markerInfo.style.marker)||{}});textStyles=currMarkerObj.markers.map(function(markerInfo){return markerInfo.style&&getStyleDef(markerInfo.style.text)||{}});markerStyle=getSameProperty(markerStyles);textStyle=getSameProperty(textStyles);if(!markerStyle.fill){markerStyle.fill=currMarkerObj.fill=config["default-stroke-color-multiple"]}if(!markerStyle.stroke){markerStyle.stroke=config["default-stroke-color-multiple"]}}else{markerStyle.fill=currMarkerObj.fill=convertColor(pluck(markerStyle.fill,info.fill),pluck(markerHoverStyle["fill-opacity"],markerStyle["fill-opacity"],defaultMarkerStyle["fill-opacity"])*100);markerStyle.stroke=currMarkerObj.stroke=convertColor(pluck(markerStyle.stroke,info.fill),pluck(markerHoverStyle["stroke-opacity"],markerStyle["stroke-opacity"],defaultMarkerStyle["fill-opacity"])*100)}Object.assign(appliedMarkerStyle,defaultMarkerStyle,markerStyle,hoveredStyleInfo.marker);Object.assign(appliedTextStyle,defaultTextStyle,baseTextStyle,textStyle,hoveredStyleInfo.text);return{marker:appliedMarkerStyle,text:appliedTextStyle}};_proto._drawMarkers=function _drawMarkers(){var marker=this,config=marker.config,dataInfo=config.dataInfo,y,currdata,x,width,markerStyle={},currMarker,currMarkerObj,index,stickX,id,identifier,attrObj,stickY,strokeWidth=1,multipleMarkers,markerOpacity,textOpacity,markerInfo=config.markerInfo;for(index in markerInfo){currdata=dataInfo[index];currMarkerObj=markerInfo[index];multipleMarkers=currMarkerObj.multipleMarkers;id=currMarkerObj.id;y=currdata.y;x=currdata.x;width=currdata.width||0;stickX=x+width/2;stickY=y-stickLength;markerStyle=marker.getStyleInformation(index);currMarker=currMarkerObj.markers[0];currMarkerObj.value=currdata.value;markerOpacity=markerStyle.marker.opacity;textOpacity=markerStyle.text.opacity;attrObj={path:["M",stickX,y,"V",stickY],opacity:markerOpacity};marker.addGraphicalElement({el:"path",container:{label:"group"},id:id,component:marker,attr:attrObj,css:markerStyle.marker,label:"flagStick"},true);attrObj={path:pathStr,transform:"t"+(stickX-flagWidth/2+strokeWidth)+","+(stickY-flagHeight),opacity:markerOpacity};marker.addGraphicalElement({el:"path",container:{label:"group"},id:id,component:marker,attr:attrObj,css:markerStyle.marker,label:"flagTriangle"},true);if(multipleMarkers||(identifier=currMarker.identifier)){attrObj={text:multipleMarkers?currMarkerObj.markers.length:identifier.charAt(0),x:stickX,y:stickY-flagHeight/2,opacity:textOpacity};marker.addGraphicalElement({el:"text",container:{label:"group"},id:id,component:marker,attr:attrObj,css:markerStyle.text,label:"markerText"},true)}}marker.styleInfo={}};return FlagMarker}(SmartRenderer);export default FlagMarker;