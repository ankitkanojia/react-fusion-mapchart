import number from"../scale-utils/number";import _ticks,{tickIncrement}from"../scale-utils/array/ticks";var ScaleIdentity=function(){function ScaleIdentity(){this.domain=[0,1]}var _proto=ScaleIdentity.prototype;_proto.setDomain=function setDomain(domain){this.domain=domain.map(number);return this};_proto.getDomain=function getDomain(){return this.domain.slice()};_proto.setRange=function setRange(range){this.domain=range.map(number);return this};_proto.getRange=function getRange(){return this.domain.slice()};_proto.getRangeValue=function getRangeValue(domainValue){return+domainValue};_proto.getDomainValue=function getDomainValue(rangeValue){return+rangeValue};_proto.ticks=function ticks(count){if(count===void 0){count=7}var domain=this.getDomain();return _ticks(domain[0],domain[domain.length-1],count)};_proto.nice=function nice(count){if(count===void 0){count=7}var domain=this.getDomain(),startIndex=0,endIndex=domain.length-1,start=domain[startIndex],stop=domain[endIndex],step;if(stop<start){step=start;start=stop;stop=step;step=startIndex;startIndex=endIndex;endIndex=step}step=tickIncrement(start,stop,count);if(step>0){start=Math.floor(start/step)*step;stop=Math.ceil(stop/step)*step;step=tickIncrement(start,stop,count)}else if(step<0){start=Math.ceil(start*step)/step;stop=Math.floor(stop*step)/step;step=tickIncrement(start,stop,count)}if(step>0){domain[startIndex]=Math.floor(start/step)*step;domain[endIndex]=Math.ceil(stop/step)*step;this.setDomain(domain)}else if(step<0){domain[startIndex]=Math.ceil(start*step)/step;domain[endIndex]=Math.floor(stop*step)/step;this.setDomain(domain)}return this};_proto.copy=function copy(){return(new ScaleIdentity).setDomain(this.getDomain())};return ScaleIdentity}();export default ScaleIdentity;