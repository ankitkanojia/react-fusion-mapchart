import{safeMax,safeMin}from"./index";var pack=function pack(value){return{value:value}},unpack=function unpack(pkg){return pkg.value},array=["a","b","c"];var results,o={valueOf:function valueOf(){return NaN}};describe("testing max values",function(){it("of numbers",function(){expect(safeMax([1])).toBe(1)});it("of numbers",function(){expect(safeMax([5,1,2,3,4])).toBe(5)});it("of numbers",function(){expect(safeMax([20,3])).toBe(20)});it("of numbers",function(){expect(safeMax([3,20])).toBe(20)});it("of alphabets",function(){expect(safeMax(["c","a","b"])).toBe("c")});it("of numbers in string",function(){expect(safeMax(["20","3"])).toBe("3")});it("of numbers in string",function(){expect(safeMax(["3","20"])).toBe("3")});it("of numbers in array with NaN",function(){expect(safeMax([NaN,1,2,3,4,5])).toBe(5)});it("of numbers in array with Object",function(){expect(safeMax([o,1,2,3,4,5])).toBe(5)});it("of numbers in array with NaN",function(){expect(safeMax([1,2,3,4,5,NaN])).toBe(5)});it("of numbers in array with Object",function(){expect(safeMax([1,2,3,4,5,o])).toBe(5)});it("of numbers in array with null undefined and NaN",function(){expect(safeMax([10,null,3,undefined,5,NaN])).toBe(10)});it("of numbers in array with null undefined and NaN",function(){expect(safeMax([-1,null,-3,undefined,-5,NaN])).toBe(-1)});it("of numbers and string number",function(){expect(safeMax([20,"3"])).toBe(20)});it("of numbers and string number",function(){expect(safeMax(["20",3])).toBe("20")});it("of numbers and string number",function(){expect(safeMax([3,"20"])).toBe("20")});it("of numbers and string number",function(){expect(safeMax(["3",20])).toBe(20)});it("of blank array",function(){expect(safeMax([])).toBe(undefined)});it("of numbers in array with null",function(){expect(safeMax([null])).toBe(undefined)});it("of numbers in array with undefined",function(){expect(safeMax([undefined])).toBe(undefined)});it("of numbers in array with NaN",function(){expect(safeMax([NaN])).toBe(undefined)});it("of numbers in array with NaN",function(){expect(safeMax([NaN,NaN])).toBe(undefined)});it("of numbers in array",function(){expect(safeMax([1].map(pack),unpack)).toBe(1)});it("of numbers in array",function(){expect(safeMax([5,1,2,3,4].map(pack),unpack)).toBe(5)});it("of numbers in array",function(){expect(safeMax([20,3].map(pack),unpack)).toBe(20)});it("of numbers in array",function(){expect(safeMax([3,20].map(pack),unpack)).toBe(20)});it("of alphanets",function(){expect(safeMax(["c","a","b"].map(pack),unpack)).toBe("c")});it("of string numbers",function(){expect(safeMax(["20","3"].map(pack),unpack)).toBe("3")});it("of string numbers",function(){expect(safeMax(["3","20"].map(pack),unpack)).toBe("3")});it("of numbers in array with  NaN",function(){expect(safeMax([NaN,1,2,3,4,5].map(pack),unpack)).toBe(5)});it("of numbers in array",function(){expect(safeMax([o,1,2,3,4,5].map(pack),unpack)).toBe(5)});it("of numbers in array with NaN",function(){expect(safeMax([1,2,3,4,5,NaN].map(pack),unpack)).toBe(5)});it("of numbers in array",function(){expect(safeMax([1,2,3,4,5,o].map(pack),unpack)).toBe(5)});it("of numbers in array with null undefined and NaN",function(){expect(safeMax([10,null,3,undefined,5,NaN].map(pack),unpack)).toBe(10)});it("of numbers in array with null undefined and NaN",function(){expect(safeMax([-1,null,-3,undefined,-5,NaN].map(pack),unpack)).toBe(-1)});it("of numbers and string numbers",function(){expect(safeMax([20,"3"].map(pack),unpack)).toBe(20)});it("of numbers and string numbers",function(){expect(safeMax(["20",3].map(pack),unpack)).toBe("20")});it("of numbers and string numbers",function(){expect(safeMax([3,"20"].map(pack),unpack)).toBe("20")});it("of numbers and string numbers",function(){expect(safeMax(["3",20].map(pack),unpack)).toBe(20)});it("of blank array",function(){expect(safeMax([].map(pack),unpack)).toBe(undefined)});it("of numbers in array with null",function(){expect(safeMax([null].map(pack),unpack)).toBe(undefined)});it("of numbers in array with undefined",function(){expect(safeMax([undefined].map(pack),unpack)).toBe(undefined)});it("of numbers in array with NaN",function(){expect(safeMax([NaN].map(pack),unpack)).toBe(undefined)});it("of numbers in array with NaN",function(){expect(safeMax([NaN,NaN].map(pack),unpack)).toBe(undefined)})});describe("testing min values",function(){it("of numbers",function(){expect(safeMin([1])).toBe(1)});it("of numbers",function(){expect(safeMin([5,1,2,3,4])).toBe(1)});it("of numbers",function(){expect(safeMin([20,3])).toBe(3)});it("of numbers",function(){expect(safeMin([3,20])).toBe(3)});it("of alphabets",function(){expect(safeMin(["c","a","b"])).toBe("a")});it("of numbers in string",function(){expect(safeMin(["20","3"])).toBe("20")});it("of numbers in string",function(){expect(safeMin(["3","20"])).toBe("20")});it("of numbers in array with NaN",function(){expect(safeMin([NaN,1,2,3,4,5])).toBe(1)});it("of numbers in array with Object",function(){expect(safeMin([o,1,2,3,4,5])).toBe(1)});it("of numbers in array with NaN",function(){expect(safeMin([1,2,3,4,5,NaN])).toBe(1)});it("of numbers in array with Object",function(){expect(safeMin([1,2,3,4,5,o])).toBe(1)});it("of numbers in array with null undefined and NaN",function(){expect(safeMin([10,null,3,undefined,5,NaN])).toBe(3)});it("of numbers in array with null undefined and NaN",function(){expect(safeMin([-1,null,-3,undefined,-5,NaN])).toBe(-5)});it("of numbers and string number",function(){expect(safeMin([20,"3"])).toBe("3")});it("of numbers and string number",function(){expect(safeMin(["20",3])).toBe(3)});it("of numbers and string number",function(){expect(safeMin([3,"20"])).toBe(3)});it("of numbers and string number",function(){expect(safeMin(["3",20])).toBe("3")});it("of blank array",function(){expect(safeMin([])).toBe(undefined)});it("of numbers in array with null",function(){expect(safeMin([null])).toBe(undefined)});it("of numbers in array with undefined",function(){expect(safeMin([undefined])).toBe(undefined)});it("of numbers in array with NaN",function(){expect(safeMin([NaN])).toBe(undefined)});it("of numbers in array with NaN",function(){expect(safeMin([NaN,NaN])).toBe(undefined)});it("of numbers in array",function(){expect(safeMin([1].map(pack),unpack)).toBe(1)});it("of numbers in array",function(){expect(safeMin([5,1,2,3,4].map(pack),unpack)).toBe(1)});it("of numbers in array",function(){expect(safeMin([20,3].map(pack),unpack)).toBe(3)});it("of numbers in array",function(){expect(safeMin([3,20].map(pack),unpack)).toBe(3)});it("of alphanets",function(){expect(safeMin(["c","a","b"].map(pack),unpack)).toBe("a")});it("of string numbers",function(){expect(safeMin(["20","3"].map(pack),unpack)).toBe("20")});it("of string numbers",function(){expect(safeMin(["3","20"].map(pack),unpack)).toBe("20")});it("of numbers in array with  NaN",function(){expect(safeMin([NaN,1,2,3,4,5].map(pack),unpack)).toBe(1)});it("of numbers in array",function(){expect(safeMin([o,1,2,3,4,5].map(pack),unpack)).toBe(1)});it("of numbers in array with NaN",function(){expect(safeMin([1,2,3,4,5,NaN].map(pack),unpack)).toBe(1)});it("of numbers in array",function(){expect(safeMin([1,2,3,4,5,o].map(pack),unpack)).toBe(1)});it("of numbers in array with null undefined and NaN",function(){expect(safeMin([10,null,3,undefined,5,NaN].map(pack),unpack)).toBe(3)});it("of numbers in array with null undefined and NaN",function(){expect(safeMin([-1,null,-3,undefined,-5,NaN].map(pack),unpack)).toBe(-5)});it("of numbers and string numbers",function(){expect(safeMin([20,"3"].map(pack),unpack)).toBe("3")});it("of numbers and string numbers",function(){expect(safeMin(["20",3].map(pack),unpack)).toBe(3)});it("of numbers and string numbers",function(){expect(safeMin([3,"20"].map(pack),unpack)).toBe(3)});it("of numbers and string numbers",function(){expect(safeMin(["3",20].map(pack),unpack)).toBe("3")});it("of blank array",function(){expect(safeMin([].map(pack),unpack)).toBe(undefined)});it("of numbers in array with null",function(){expect(safeMin([null].map(pack),unpack)).toBe(undefined)});it("of numbers in array with undefined",function(){expect(safeMin([undefined].map(pack),unpack)).toBe(undefined)});it("of numbers in array with NaN",function(){expect(safeMin([NaN].map(pack),unpack)).toBe(undefined)});it("of numbers in array with NaN",function(){expect(safeMin([NaN,NaN].map(pack),unpack)).toBe(undefined)})});describe("testing the resulting array in given function",function(){it("for safeMax",function(){results=[];safeMax(array,function(d,i,arr){results.push([d,i,arr])});expect(results).toEqual([["a",0,array],["b",1,array],["c",2,array]])});it("for safeMax",function(){results=[];safeMax([1,2],function(){results.push(this)});expect(results).toEqual([undefined,undefined])});it("for safeMin",function(){results=[];safeMin(array,function(d,i,arr){results.push([d,i,arr])});expect(results).toEqual([["a",0,array],["b",1,array],["c",2,array]])});it("for safeMin",function(){results=[];safeMin([1,2],function(){results.push(this)});expect(results).toEqual([undefined,undefined])})});