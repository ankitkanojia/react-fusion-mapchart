{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isObject = isObject;\nexports.isCallable = isCallable;\nexports.isSameObjectContent = isSameObjectContent;\nexports.isUndefined = isUndefined;\nexports.deepCopyOf = deepCopyOf;\nexports.checkIfDataTableExists = checkIfDataTableExists;\nexports.cloneDataSource = cloneDataSource;\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n/* eslint-disable guard-for-in */\n\n\nfunction isObject(value) {\n  return value !== null && _typeof(value) === 'object';\n}\n\nfunction isCallable(value) {\n  return typeof value === 'function';\n}\n\nfunction isSameObjectContent(obj1, obj2) {\n  if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n    return false;\n  }\n\n  var keys = Object.keys(obj1);\n\n  for (var i = 0; i < keys.length; i += 1) {\n    var key = keys[i];\n\n    if (isObject(obj1[key]) && isObject(obj2[key])) {\n      if (!isSameObjectContent(obj1[key], obj2[key])) {\n        return false;\n      }\n    } else if (obj1[key] !== obj2[key]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isUndefined(value) {\n  // eslint-disable-next-line no-void\n  var UNDEFINED = void 0;\n  return value === UNDEFINED;\n}\n\nfunction deepCopyOf(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nfunction checkIfDataTableExists(dataSource) {\n  // eslint-disable-next-line no-underscore-dangle\n  if (dataSource && dataSource.data && dataSource.data._dataStore) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction cloneDataSource(obj) {\n  var purpose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'clone';\n\n  var type = _typeof(obj);\n\n  if (type === 'string' || type === 'number' || type === 'function' || type === 'boolean') {\n    return obj;\n  }\n\n  if (obj === null || obj === undefined) {\n    return obj;\n  }\n\n  if (Array.isArray(obj)) {\n    var arr = [];\n\n    for (var i = 0; i < obj.length; i++) {\n      arr.push(this.cloneDataSource(obj[i]));\n    }\n\n    return arr;\n  }\n\n  if (_typeof(obj) === 'object') {\n    var clonedObj = {}; // eslint-disable-next-line guard-for-in\n    // eslint-disable-next-line no-restricted-syntax\n\n    for (var prop in obj) {\n      // Edge case handling for DataTable\n      if (prop === 'data') {\n        // eslint-disable-next-line no-underscore-dangle\n        if (obj[prop]._dataStore && purpose === 'clone') {\n          clonedObj[prop] = obj[prop]; // eslint-disable-next-line no-underscore-dangle\n        } else if (obj[prop]._dataStore && purpose === 'diff') {\n          clonedObj[prop] = '-';\n        } else {\n          clonedObj[prop] = this.cloneDataSource(obj[prop]);\n        }\n\n        continue;\n      }\n\n      clonedObj[prop] = this.cloneDataSource(obj[prop]);\n    }\n\n    return clonedObj;\n  }\n\n  return undefined;\n}","map":null,"metadata":{},"sourceType":"script"}